// src/app/plants/create/create.component.ts
import { Component, OnInit } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { PlantService } from '../plant.service'; // Import your service
import { Plant } from '../plant'; // Import your interface
import { Greenhouse } from '../../greenhouses/greenhouse'; // Import your interface
import { GreenhouseService } from '../../greenhouses/greenhouses.service';
import { Router } from '@angular/router'; // Import the router


@Component({
  selector: 'app-create',
  templateUrl: './create.component.html',
  styleUrls: ['./create.component.css']
})
export class PlantCreateComponent implements OnInit {
  plantForm!: FormGroup;
  isLoading = false;
  errorMessage = '';
  greenhouses!: Greenhouse[]; // This declares 'greenhouses' as an array of Greenhouse interfaces

  // constructor(
  //   private fb: FormBuilder,
  //   private greenhouseService: GreenhouseService // Inject the GreenhouseService here
  // ) { }

  constructor(
    private fb: FormBuilder,
    private plantService: PlantService, // Inject the PlantService here
    private greenhouseService: GreenhouseService, // Inject the GreenhouseService here
    private router: Router // Inject the router here
  ) { }

  ngOnInit() {
    this.plantForm = this.fb.group({
      _id: [null], // Assuming _id is optional as it's generated by the database
      datePlanted: ['', Validators.required],
      height: ['', [Validators.required, Validators.min(0)]], // Assuming height should be a positive number
      greenhouseId: ['', Validators.required] // Assuming this is a dropdown in your form
    });
    this.greenhouseService.getGreenhouses().subscribe({
      next: (data) => this.greenhouses = data,
      error: (error) => console.error('Error fetching greenhouses', error),
      complete: () => console.log('Greenhouse fetch complete') // Optional
    });

  }

  onSubmit() {
    if (this.plantForm.valid) {
      this.plantService.addPlant(this.plantForm.value).subscribe({
        next: (newPlant) => {
          console.log('New plant added:', newPlant);
          this.router.navigate(['/plants', newPlant._id.toString()]);

          // Here you might redirect the user to the list of plants, or show a success message
        },
        error: (error) => {
          console.error('There was an error adding the plant', error);
          // Here you might show an error message to the user
        }
      });
    } else {
      // If the form is invalid, you might want to touch all the fields to trigger validation messages
      for (const control of Object.values(this.plantForm.controls)) {
        control.markAsTouched();
      }
    }
  }
}
